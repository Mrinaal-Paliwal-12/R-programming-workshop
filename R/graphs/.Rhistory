install.packages("xlsx")
x=10
y->22
33<-z
x
y
z
x=10
y<-22
33->z
x
y
z
class(x)
x="vaibhav"
y<-22
33->z
x="vaibhav"
y<-22
33->z
x
y
z
class(x)
typeof(x)
x="vaibhav"
y<-22
33->z
x
y
z
class(x)
typeof(x)
x=10
class(x)
typeof(x)
y=10L
class(y)
typeof(y)
#double
x<-10.5
class(x)
#character 'a' 'abcd'
x="abcd"
typeof(x)
x=TRUE
class(x)
x=-10+5i
y=5+0i
z=x+y
z
class(z)
#raw type
x=as.raw("vaibhav")
class(x)
x=as.raw("vaibhav")
x
class(x)
name.surname="Kumar"
name="Kumar
print(name)
name="Kumar"
print(name)
name="Kumar"
print(name)
name="Kumar"
print(name)
cat(name)
paste(name)
paste(name)
paste0(name)
sprintf("name is %s",name)
print("hello ",name)
print(paste("hello,"),name)
name="Kumar"
#output functions in R
print(name)
print(paste("hello,"),name)
name="Kumar"
#output functions in R
print(name)
print(paste("hello, "),name)
name="Kumar"
#output functions in R
print(name)
print(paste("hello, ",name))
name="Kumar"
#output functions in R
print(name)
print(paste("hello, ",name))
cat("hello",name)
paste("welcome",name)
paste0("welcome",name)
sprintf("name is %s",name)
name=readline(prompt = "Enter your name : ");
print(paste("WELCOME,",name))
email=readline(prompt = "Enter your email : ");
email=readline(prompt = "Enter your email : ");
email=readline(prompt = "Enter your email : ");
print(paste("WELCOME,",email,password))
}
{
email=readline(prompt = "Enter your email : ");
password=readline(prompt = "Enter your password : ");
print(paste("WELCOME,",email,password))
}
name=scan(what = "")
name
name=scan(what = "")
name
#user-Defined functions
f<-function(){
print(paste("Normal ....f function called...."))
}
f
#passing parameters to the func
f<-function(a,b){
print(paste("user passed a:",a,"b:",b))
return a+b;
}
f
#user-Defined functions
f<-function(){
print(paste("Normal ....f function called...."))
}
f
#passing parameters to the func
f<-function(a,b){
print(paste("user passed a:",a,"b:",b))
return a+b;
}
f
#user-Defined functions
f<-function(){
print(paste("Normal ....f function called...."))
}
f
#passing parameters to the func
f<-function(a,b){
print(paste("user passed a:",a,"b:",b))
return(a+b);
}
f
#user-Defined functions
f<-function(){
print(paste("Normal ....f function called...."))
}
f
#passing parameters to the func
f<-function(a,b){
print(paste("user passed a:",a,"b:",b))
return(a+b);
}
f
#passing parameters to the func
f<-function(a,b){
print(paste("user passed a:",a,"b:",b))
return(a+b);
}
x=f(5,6)
#passing parameters to the func
f<-function(a,b){
print(paste("user passed a:",a,"b:",b))
return(a+b);
}
x=f(5,6)
f
#passing parameters to the func
f<-function(a,b){
print(paste("user passed a:",a,"b:",b))
return(a+b);
}
x=f(5,6)
f
#passing parameters to the func
f<-function(a,b){
print(paste("user passed a:",a,"b:",b))
return(a+b);
}
x=f(5,6)
x
f<-function(){
print(paste("Normal ....f function called...."))
}
f
f<-function(){
print(paste("Normal ....f function called...."))
}
f
#user-Defined functions
f<-function(){
print(paste("Normal ....f function called...."))
}
f
#passing parameters to the func
f<-function(a,b){
print(paste("user passed a:",a,"b:",b))
return(a+b);
}
x=f(5,6)
x
#passing default parameters to the func
f<-function(a,b,c=69){
print(paste("user passed a:",a,"b:",b,"c:",c))
return(a+b+c);
}
x=f(5,6)
x
vector1 = c(1,2,3,4,5)
vector1
class(vector1)
#automic vectors
vector1 = c(TRUE,FALSE,TRUE,FALSE,FALSE)
vector1
class(vector1)
#automic vectors
vector1 = c(TRUE,FALSE,TRUE,FALSE,FALSE)
vector1
class(vector1)
#automic vectors
vector1 = c(1,2,3)
vector1
class(vector1)
#automic vectors
vector1 = c("HELOO")
vector1
class(vector1)
#automic vectors
vectorAA = c("vaibhav"<=23,"kumar"<=69)
vectorAA
class(vectorAA)
#automic vectors
vectorAA = c("vaibhav"<=23,"kumar"<=69)
vectorAA
class(vectorAA)
vectorAA
class(vectorAA)
vectorA =seq(1:10)
vectorA
vectorA = seq(1,10,by=2)
vectorA
vectorA = seq(10,100,length.out=7)
vectorB = seq(20,200,length.out=7)
vectorC = vectorA+vectorB
vectorC
#data structures in R
#1.vectors
#2.list
#3.arrays
#4.matrix
#5.data frames
#1.R is obssessed with vectors
#1.1 automic vectors
#1.2 created with seq() or c()
#automic vectors
vector1 = c(TRUE,FALSE,TRUE,FALSE,FALSE)
vector1
class(vector1)
vector1 = c(1,2,3)
vector1
class(vector1)
vector1 = c("HELOO")
vector1
class(vector1)
vectorAA = c("vaibhav"<=23,"kumar"<=69)
vectorAA
class(vectorAA)
vectorA =seq(1:10)
vectorA
vectorA = seq(1,10,by=2)
vectorA
vectorA = seq(10,100,length.out=7)
vectorB = seq(20,200,length.out=7)
vectorC = vectorA+vectorB
vectorC
#data structures in R
#1.vectors
#2.list
#3.arrays
#4.matrix
#5.data frames
#1.R is obssessed with vectors
#1.1 automic vectors
#1.2 created with seq() or c()
#automic vectors
vector1 = c(TRUE,FALSE,TRUE,FALSE,FALSE)
vector1
class(vector1)
vector1 = c(1,2,3)
vector1
class(vector1)
vector1 = c("HELOO")
vector1
class(vector1)
vectorAA = c("vaibhav"<=23,"kumar"<=69)
vectorAA
class(vectorAA)
vectorA =seq(1:10)
vectorA
vectorA = seq(1,10,by=2)
vectorA
vectorA = seq(10,100,length.out=7)
vectorB = seq(20,200,length.out=7)
vectorC = vectorA+vectorB
vectorC
a=c(2,3,4,6)
b=c(6,7,5,3)
d=a+b
e=c(a,b,s)
s=c("a","b","c")
e
a=c(2,3,4,6)
b=c(6,7,5,3)
d=a+b
s=c("a","b","c")
e=c(a,b,s)
e
vectorL=c(TRUE,FALSE,TRUE,FALSE,TRUE,TRUE)
vectorNames= c()
class(vectorL)
vectorAA = c("Divya" , "Mitali", "Somaiya College","IOT","Hola!" )
vectorAA[vectorL]
vectorL=c(TRUE,FALSE,TRUE,FALSE,TRUE,TRUE)
vectorNames= c()
class(vectorL)
vectorAA = c("vaibhav" , "kumar", "Somaiya ","IOT","hello!" )
vectorAA[vectorL]
png("histogram.jpeg")
hist(airquality$Temp,main = "temp observed at airport",xlim=c(50,100),ylim=c(0,25),frequency=FALSE)
dev.off()
getwd()
png("histogram.jpeg")
hist(airquality$Temp,main = "temp observed at airport",xlim=c(50,100),ylim=c(0,25),frequency=FALSE)
setwd(D:\\vk\\R\\graphs)
dev.off()
setwd("D:\\vk\\R\\graphs")
png("histogram.jpeg")
hist(airquality$Temp,main = "temp observed at airport",xlim=c(50,100),ylim=c(0,25),frequency=FALSE)
setwd("D:\\vk\\R\\graphs")
dev.off()
png("histogram.jpeg")
hist(airquality$Temp,main = "temp observed at airport",xlim=c(50,100),ylim=c(0,25),frequency=FALSE,
col = "magenta",breaks = c(10,40,70,100)
setwd("D:\\vk\\R\\graphs")
dev.off()
png("histogram.jpeg")
hist(airquality$Temp,main = "temp observed at airport",xlim=c(50,100),ylim=c(0,25),frequency=FALSE,
col = "magenta",breaks = c(10,40,70,100))
setwd("D:\\vk\\R\\graphs")
dev.off()
png("histogram1.jpeg")
hist(airquality$Temp,main = "temp observed at airport",xlim=c(50,100),ylim=c(0,25),frequency=FALSE,
col = "magenta")
setwd("D:\\vk\\R\\graphs")
dev.off()
x=hist(airquality$Temp)
x
x
png("histogram2.jpeg")
hist(airquality$Temp)
x=hist(airquality$Temp)
text(h$mids,h$counts,labels=h$count,adj=c(0.5,-0.5))
h=hist(airquality$Temp)
text(h$mids,h$counts,labels=h$count,adj=c(0.5,-0.5))
h
png("histogram2.jpeg")
hist(airquality$Temp)
h=hist(airquality$Temp)
text(h$mids,h$counts,labels=h$count,adj=c(0.5,-0.5))
dev.off()
#line graphs
#p , o , x
#type - p(points),x(lines),o(both lines and points)
png("lineGrapgh.jpeg")
plot(airquality$Temp.type="o")
dev.off()
#line graphs
#p , o , x
#type - p(points),x(lines),o(both lines and points)
png("lineGrapgh.jpeg")
plot(airquality$Temp,type="o")
dev.off()
#line graphs
#p , o , x
#type - p(points),x(lines),o(both lines and points)
png("lineGrapgh.jpeg")
plot(airquality$Temp,type="o")
line(airquality$Ozone,type="l",col="green")
line(airquality$Wind,type="l",col="red")
dev.off()
#line graphs
#p , o , x
#type - p(points),x(lines),o(both lines and points)
png("lineGrapgh.jpeg")
plot(airquality$Temp,type="o")
lines(airquality$Ozone,type="l",col="green")
lines(airquality$Wind,type="l",col="red")
dev.off()
#line graphs
#p , o , x
#type - p(points),x(lines),o(both lines and points)
png("lineGrapgh.jpeg")
plot(airquality$Temp,type="o")
lines(airquality$Ozone,type="l",col="green")
lines(airquality$Solar.R,type="l",col="red")
dev.off()
temp=c(33,34,32,12,34)
humidity=c(56,43,32,51,39)
nums=c(2,3,4,57,43)
png("lineGrapgh1.jpeg")
plot(temp,type="o")
lines(humidity,type="l",col="green")
lines(nums,type="l",col="red")
dev.off()
# present in R
orange <- Orange[, c('age', 'circumference')]
# output to be present as PNG file
png("scatterplot.jpeg")
# plotting
plot(x = orange$age, y = orange$circumference, xlab = "Age",
ylab = "Circumference", main = "Age VS Circumference",
col.lab = "darkgreen", col.main = "darkgreen",
col.axis = "darkgreen")
# saving the file
dev.off()
install.packages("dplyr")
install.packages("rvest")
library(rvest)
library(rvest)
library(dplyr)
install.packages("dplyr")
library(rvest)
install.packages("rvest")
library(rvest)
install.packages("rvest")
